#!/bin/bash

source bugyi.sh

readonly BUG_USER="${BUG_USER:-bbugyi}"

USAGE_GRAMMAR=(
  "[-v] [-p PARENT] TAG COMPONENT"
  "-h"
)
VIM_COMMANDS=(
  'exec "normal ggd7j"'
  '%s/PRIORITY=\zsP[0-4]/P2/'
  '%s/SEVERITY=\zsS[0-4]/S2/'
  '%s/STATUS=\zsNEW/ASSIGNED/'
  '%s/TYPE=\zsBUG/TASK/'
  'exec "normal gg"'
  "call append(line(\".\")-1, \"ASSIGNEE=${BUG_USER}\")"
  'exec "normal gg"'
)

read -r -d '' DOC <<EOM
$(usage)

Create new Buganizer bug using go/bugged.

Positional Arguments
--------------------
TAG
    The new bug we create will have its title prefixed with [TAG].

COMPONENT
    The ID of a Buganizer component that should be used for our new bug.

Optional Arguments
------------------
-h | --help
    View this help message.

-p PARENT | --parent PARENT
    PARENT should be a positive integer which will be treated as a Buganizer bug
    ID. PARENT will be used as the parent of the new bug.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).
EOM

function run() {
    parse_cli_args "$@"
    if [[ -n "${PARENT}" ]]; then
      log::info "Adding PARENT=$PARENT to bugspec."
      VIM_COMMANDS+=(
        "call append(line(\".\")-1, \"PARENT=$PARENT\")"
        'exec "normal gg"'
      )
    fi

    VIM_COMMANDS+=(
      'call append(line(".")-1, "")'
      'exec "normal gg"'
      "call append(line(\".\")-1, \"[$TAG] \")"
      'exec "normal gg$"'
      'startinsert!'
    )

    local vim_cmd="$(printf '%s | ' "${VIM_COMMANDS[@]}" | sed 's/...$//')"
    EDITOR="vim -c '${vim_cmd}'" bugged create --format markdown "${COMPONENT}"
}

function parse_cli_args() {
    dmsg "Command-Line Arguments: ($*)"

    eval set -- "$(getopt -o "h,p:,v" -l "help,parent:,verbose" -- "$@")"

    # shellcheck disable=SC2154
    read -r -d '' HELP <<EOM || [[ -n "${HELP}" ]]
${DOC}
EOM

    VERBOSE=0
    while [[ -n "$1" ]]; do
        case $1 in
        -h | --help)
            echo "${HELP}"
            exit 0
            ;;
        -p | --parent)
            shift
            PARENT="$1"
            ;;
        -v | --verbose)
            VERBOSE=$((VERBOSE + 1))
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done

    if [[ "${VERBOSE}" -gt 1 ]]; then
        PS4='$LINENO: '
        set -x
    fi

    if [[ $# -ne 2 ]]; then
      die "$(usage)" 2
    fi

    TAG="$1"
    shift

    COMPONENT="$1"
    shift

    readonly COMPONENT
    readonly DOC
    readonly HELP
    readonly PARENT
    readonly TAG
    readonly VERBOSE
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    run "$@"
fi
