#!/bin/bash

source bugyi.sh

POST_NOTIFY_SLEEP=50
PRE_CHECK_SLEEP=10
USAGE_GRAMMAR=(
  "[-v]"
  "-h"
)

read -r -d '' DOC <<EOM
$(usage)

Notify me when the current zorg pomodoro is complete.

Optional Arguments
------------------
-h | --help
    View this help message.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).
EOM

function run() {
    parse_cli_args "$@"
    while true; do
      log::info \
        "Starting Loop: Every %d seconds, I will check if the current pomodoro is done." \
        $PRE_CHECK_SLEEP
      local should_notify=true
      while true; do
        sleep $PRE_CHECK_SLEEP
        if [[ $(zo_pomodoro) == *'OVERDUE'* ]]; then
          break
        fi
        should_notify=true
      done

      log::info "Sending notifications since pomodoro is done!"
      if [[ "${should_notify}" == true ]]; then
          notify_me
          should_notify=false
      fi

      log::info "Should Notify?: %s" "${should_notify}"
      log::info "Sleeping for %d seconds before restarting check loop." $POST_NOTIFY_SLEEP
      sleep $POST_NOTIFY_SLEEP
    done
}

function notify_me() {
  if command -v notify-send &>/dev/null; then
    notify-send -u critical 'zorg' 'Pomodoro is done!'
  fi

  for i in 0 1 2; do
    echo -e '\a'
    sleep 1
  done
}

function parse_cli_args() {
    dmsg "Command-Line Arguments: ($*)"

    eval set -- "$(getopt -o "h,v" -l "help,verbose" -- "$@")"

    # shellcheck disable=SC2154
    read -r -d '' HELP <<EOM || [[ -n "${HELP}" ]]
${DOC}
EOM

    VERBOSE=0
    while [[ -n "$1" ]]; do
        case $1 in
        -h | --help)
            echo "${HELP}"
            exit 0
            ;;
        -v | --verbose)
            VERBOSE=$((VERBOSE + 1))
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done

    if [[ "${VERBOSE}" -gt 1 ]]; then
        PS4='$LINENO: '
        set -x
    fi

    readonly DOC
    readonly HELP
    readonly VERBOSE
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    run "$@"
fi
