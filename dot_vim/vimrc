" #################### SETTINGS ###############################################
" 'nocompatible' must be set first because it overwrites some other settings.
set nocompatible

function! GitBranchStatus()
  let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
  if strlen(l:branchname) > 0
      return printf("(%s)    ", l:branchname)
  else
      return ""
  endif
endfunction

set autoindent
set autoread
set background=light
set backspace=2
set belloff=all
set breakindent  " Indents wraps
set colorcolumn=
set completeopt-=preview
set nocursorcolumn
set nocursorline
" set diffopt+=iwhiteall
set expandtab
set exrc  " Allows Local .vimrc to be loaded
set grepformat=%f:%l:%c:%m
set grepprg=ag\ --nogroup\ --nocolor
set hidden  " Allows you to change buffers without first saving the current buffer
set history=200  " Increase command history limit
set ignorecase
set incsearch
set infercase  " Autocompletion will only recommend completions that match the typed case
set laststatus=2
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:␣
set modeline  " Enables Modeline Magic
set mouse=a  " Allows me to use the mouse
set nohlsearch  " Disables search highlighting
set nolist
set nrformats+=alpha  " Status Line Settings (mode display)
set number
set scrolloff=5  " Always show N line(s) above/below cursor
set secure
set shiftwidth=4
set smartcase
set relativenumber
set rtp+=~/.fzf
let &statusline = "%f %m %= Lines: %l/%L | Columns: %c/%{strwidth(getline('.'))} | %y"
set tabstop=4
set tags^=./.git/tags,.tags,./.tags;
set ttymouse=sgr  " An attempt to fix the issue where mouse-clicks cause random output to screen
set tw=0
set undofile
set undodir=$HOME/.vim/undo
set viminfo+=n~/.vim/viminfo  " since viminfo file CANNOT be a symlink
set wildignore+=*/__pycache__/*,*/.git/*,*/venv/*  " 'find'/ctrlp should ignore these folders
set wildmenu  " Improves tab completion from normal mode
set wildmode=full

" Create undo directory if it does not already exist.
silent !mkdir ~/.vim/undo > /dev/null 2>&1

" yank to clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" #################### VARIABLE DEFINITIONS ###################################
let mapleader = ","  " The <Leader> key can be used for extra mappings
let maplocalleader = "\\"
let g:S = 0  " Used in 'Sum()' function
let g:tex_flavor = "latex"  " Sets LaTeX as default for .tex files


" #################### KEY BINDINGS ###########################################
function! CookieMirror(project)
    let local_file_path = substitute(expand('%:p'), getcwd(), '', 0)
    return $HOME . '/.cookiecutters/' . a:project . local_file_path
endfunction


" Returns an expression that will replace a forward slash when one is typed
" in INSERT mode. Used to enable automatic file completion (and sometimes
" header completion in C/C++).
function! InterpretForwardSlash()
    let last_ch = matchstr(getline('.'), '\%' . (col('.') - 1) . 'c.')

    if (&filetype == 'c' || &filetype == 'cpp')
        let current_ch = matchstr(getline('.'), '\%' . col('.') . 'c.')
        if (current_ch == '>')
            if (last_ch == "/")
                return "\<C-x>\<C-k>"
            endif

            return "/\<C-x>\<C-k>"
        endif
    endif

    if (last_ch == "/" && pumvisible())
        return "\<C-x>\<C-f>\<C-p>"
    endif

    if (((last_ch == "~") || last_ch == ".") || pumvisible() || last_ch =~ "[A-z0-9]")
        return "/\<C-x>\<C-f>\<C-p>"
    endif

    return "/"
endfunction


" Returns an expression that will replace a forward slash when one is typed
" in INSERT mode. Used to make file completion work better with hidden files.
function! InterpretDot()
    let last_ch = matchstr(getline('.'), '\%' . (col('.') - 1) . 'c.')

    if (last_ch == "/")
        return ".\<C-x>\<C-f>\<C-p>"
    endif

    return "."
endfunction


function! LineTooLong(lch)
    execute "normal F" . a:lch . "a\<CR>\<Esc>k$%i\<CR>\<Esc>k^"
endfunction


" Create mappings to open @f in using the current window, a horizontal split,
" and a vertical split; respectively.
function! s:MapEditCommands(chars, file_expr)
    execute "nnoremap <Leader>0" . a:chars . " :execute 'edit' " . a:file_expr . "<CR>"
    execute "nnoremap <Leader>_" . a:chars . " :execute 'split' " . a:file_expr . "<CR>"
    execute "nnoremap <Leader>\\|" . a:chars . " :execute 'vsplit' " . a:file_expr . "<CR>"
endfunction


" Create the same mapping for both NORMAL and INSERT modes.
function! s:nimap(lhs, rhs)
    execute "nnoremap " . a:lhs . " " . a:rhs
    execute "imap " . a:lhs . " <Esc>" . a:lhs
endfunction


function! NthCookie(N)
    let ext = &filetype

    if &filetype == "python"
        let ext = 'py'
    endif

    let templates = systemlist('cookie -l | grep \.' . ext)
    return $HOME . '/.cookiecutters/' . templates[a:N - 1]
endfunction


function! RemoveBuffer(direction)
    exec 'b' . a:direction . ' | sp | b# | bd'
endfunction


function! RemoveFile()
    let filename = expand('%')
    call RemoveBuffer('n')
    call system("trash " . filename)
endfunction


" Swap the chosen word (specified via a motion) with the word that was deleted
" prior to calling this function.
function! SwapWords(type)
    exec 'normal! `.mm``'
    exec 'normal! v`]P'
    exec 'normal! `mP'
endfunction


" Serves to enable the use of * and # in visual mode to search for the
" selected word.
function! s:VSetSearch(cmdtype)
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
	let @s = temp
endfunction

function! WrapLine()
    let wrap_tw = get(b:, 'wrap_tw', &tw)
    let old_tw = &tw
    let tw = wrap_tw

    normal gqap

    let tw = old_tw
endfunction

" copy to attached terminal using the yank(1) script:
" https://github.com/sunaku/home/blob/master/bin/yank
function! Yank(text) abort
  let escape = system('yank', a:text)
  if v:shell_error
    echoerr escape
  else
    call writefile([escape], '/dev/tty', 'b')
  endif
endfunction

" >>>>>>>>>>>>> INSERT
inoremap <expr> / InterpretForwardSlash()
inoremap <expr> . InterpretDot()
inoremap <expr> <C-d> pumvisible() ? "\<C-n>\<C-y>\<C-x>\<C-f>\<C-p>" : "\<C-x>\<C-f>\<C-p>"
inoremap <Leader>o <CR><Esc>O
inoremap <C-o> <C-x><C-o>
imap <C-h> <Esc><C-h>
imap <C-j> <Esc><C-j>
imap <C-k> <Esc><C-k>
imap <C-l> <Esc><C-l>
inoremap <C-s> <Esc>:Snippets<CR>
inoremap <C-w> <Esc><C-w>

" >>>>>>>>>>>>> VISUAL
vnoremap <Space> $<Left>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>| " Allows for visual search
xnoremap & :&&<CR>
vnoremap dx <Esc>`.``gvP``P
vnoremap <silent> <Leader>i :w !ix \| xargs printf "\%s/<C-R>=&filetype<CR>" \| xclip -sel clipboard<CR>
vnoremap <silent> <LocalLeader>i :w !curl -F 'sprunge=<-' http://sprunge.us \| xargs printf "\%s?<C-R>=&filetype<CR>" \| xclip -sel clipboard<CR>
vnoremap <silent> <Leader>.i :w !ix \| xclip -sel clipboard<CR>
vnoremap <silent> <LocalLeader>.i :w !curl -F 'sprunge=<-' http://sprunge.us \| xclip -sel clipboard<CR>
vnoremap K K<CR>
vnoremap p pgvy
vnoremap P p
vnoremap <Leader>s :sort ri //<Left>

" >>>>>>>>>>>>> COMMAND
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
cnoremap w!! w !sudo tee > /dev/null %

" >>>>>>>>>>>>> OPERATOR
onoremap @ iW

" >>>>>>>>>>>>> NORMAL
" -------------------
" ----- Numeric -----
" -------------------
nnoremap <Leader>00 :cd %:h<CR>:pwd<CR>
call s:MapEditCommands("cc", "CookieMirror('C')")
call s:MapEditCommands("cg", "CookieMirror('github')")
call s:MapEditCommands("ls", "'<C-R>=getcwd()<CR>/<C-R>=&filetype<CR>.snippets'")
call s:MapEditCommands("lv", "'<C-R>=getcwd()<CR>/.lvimrc'")
call s:MapEditCommands("s", "'" . $HOME . "/.local/share/chezmoi/dot_vim/vim-snippets/<C-R>=&filetype<CR>.snippets'")
call s:MapEditCommands("S", "'" . $HOME . "/.local/share/chezmoi/dot_vim/vim-snippets/all.snippets'")
call s:MapEditCommands("t1", "NthCookie('1')")
call s:MapEditCommands("t2", "NthCookie('2')")
call s:MapEditCommands("t3", "NthCookie('3')")
call s:MapEditCommands("v", "'" . $HOME . "/.vim/ftplugin/<C-R>=&filetype<CR>.vim'")
call s:MapEditCommands("V", "'" . $HOME . "/.vim/vimrc'")
" ----------------------
" ----- Alphabetic -----
" ----------------------
" A-A-A-A-A-A-A-A-A-A
nnoremap <Leader>a :AnsiEsc<CR>
" B-B-B-B-B-B-B-B-B-B
" C-C-C-C-C-C-C-C-C-C
" D-D-D-D-D-D-D-D-D-D
nnoremap <Leader>d :call RemoveBuffer('#')<CR>
nnoremap <LocalLeader>d :call RemoveBuffer('n')<CR>
nnoremap <Leader>D :update<CR>:call RemoveFile()<CR>
nnoremap dx :set opfunc=SwapWords<CR>g@
" E-E-E-E-E-E-E-E-E-E
call s:nimap('<Leader>e', ':x!<CR>')
nnoremap <Leader><Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
call s:nimap('<Leader>E', ':xa!<CR>')
" F-F-F-F-F-F-F-F-F-F
nnoremap f mff
nnoremap F mfF
nmap <Leader>f <Plug>CtrlSFCCwordPath<CR><C-W>k
nmap <LocalLeader>ft :CtrlSFToggle<CR>
nnoremap <Leader>.fs :sfind 
nnoremap <Leader>.fv :vert sfind 
nnoremap <Leader>.ft :tabfind 
" G-G-G-G-G-G-G-G-G-G
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gA :Dispatch! git commit -v -a --no-edit --amend<CR>
nnoremap <Leader>gb :Git blame<CR>
nnoremap <Leader>gc :Git commit -v -q<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap gj j
nnoremap gk k
nnoremap <Leader>gg :Git<CR>
nnoremap <Leader>gl :silent! Gclog<CR>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gp :Dispatch! git push<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>gt :Git commit -v -q %:p<CR>
nnoremap gV ggVG
nnoremap <Leader>gw :Gwrite<CR><CR>
" H-H-H-H-H-H-H-H-H-H
" I-I-I-I-I-I-I-I-I-I
" J-J-J-J-J-J-J-J-J-J
nnoremap j gj
" K-K-K-K-K-K-K-K-K-K
nnoremap k gk
nnoremap K K<CR>
" L-L-L-L-L-L-L-L-L-L
" M-M-M-M-M-M-M-M-M-M
" N-N-N-N-N-N-N-N-N-N
map <C-n> :Ranger<CR>
" O-O-O-O-O-O-O-O-O-O
nnoremap <Leader>O O<C-u>
nnoremap <Leader>o o<C-u>
nnoremap [oe :ALEToggle<CR>
nnoremap ]oe :ALEToggle<CR>
" P-P-P-P-P-P-P-P-P-P
nnoremap <C-p>b :Buffers<CR>
nnoremap <C-p>c :BCommits<CR>
nnoremap <C-p>f :Files<CR>
nnoremap <C-p>h :History<CR>
nnoremap <C-p>s :Rg<CR>
nnoremap <C-p>r :Rg<CR>
nnoremap <C-p>t :BTags<CR>zv
" Q-Q-Q-Q-Q-Q-Q-Q-Q-Q
" R-R-R-R-R-R-R-R-R-R
call s:nimap('<Leader>r', ':update<CR>:execute b:run_cmd<CR>')
call s:nimap('<Leader>R', ':update<CR>:execute b:Run_cmd<CR>')
" S-S-S-S-S-S-S-S-S-S
call s:nimap('<Leader>s', ':update<CR>')
nnoremap <Leader><Leader>s :sp <C-R>=expand("%:p:h") . "/" <CR>
call s:nimap('<Leader>S', ':update<CR>:mksession!<CR>')
nnoremap <LocalLeader>s :w !sudo tee > /dev/null %<CR>
nmap S ys
" T-T-T-T-T-T-T-T-T-T
nnoremap <Leader><Leader>t :tabe <C-R>=expand("%:p:h") . "/" <CR>
" U-U-U-U-U-U-U-U-U-U
" V-V-V-V-V-V-V-V-V-V
nnoremap <Leader>v :vert sfind 
nnoremap <Leader><Leader>v :vs <C-R>=expand("%:p:h") . "/" <CR>
" W-W-W-W-W-W-W-W-W-W
nnoremap <Leader>W :call WrapLine()<CR> " mapping to wrap paragraph
nmap <Leader><Leader>W ]<Space>[<Space>kmmj:call WrapLine()<CR>dd'mdd
nnoremap <silent> [w "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>:nohlsearch<CR>
nnoremap <silent> ]w "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR>:nohlsearch<CR>
" X-X-X-X-X-X-X-X-X-X
" Y-Y-Y-Y-Y-Y-Y-Y-Y-Y
nnoremap Y y$
noremap <silent> <Leader>y y:<C-U>call Yank(@0)<CR>
nnoremap <Leader>Y ma^y$`a
" Z-Z-Z-Z-Z-Z-Z-Z-Z-Z
nnoremap zn zjza
nnoremap zN zjzA
nnoremap zp zkza[z
nnoremap zP zkzA[z
" -------------------
" ----- Symbols -----
" -------------------
nmap ( [[
nmap ) ]]
nnoremap <Leader>( :call LineTooLong('(')')<CR>
nnoremap <Leader>[ :call LineTooLong('[')<CR>
nnoremap [; ,
nnoremap ]; ;
nnoremap * /\v\C<<C-R><C-W>><CR>zv
call s:nimap('<Leader>#', ':call MakeBox()<CR>')
nnoremap <C-\> <C-^>
nnoremap ; :
nmap { [m
nmap } ]m
nnoremap [{ {
nnoremap ]} }
call s:nimap('<C-e>', '<C-w>=:redraw!<CR>')
nnoremap <Leader>/ /\v\C<><Left>
nnoremap <Leader>% :so %<CR>
nnoremap _ :<C-u>execute "sbuffer " . v:count1<CR>
nnoremap \| :<C-u>execute "vert sbuffer " . v:count1<CR>
nnoremap + :<C-u>execute "tab sbuffer " . v:count<CR>
nnoremap - :<C-u>execute "buffer " . v:count1<CR>
nnoremap & :&&<CR>| " Preserves flags when repeating the last substitute command.
" ------------------------------
" ----- Special Characters -----
" ------------------------------
" ~ Mouse Events ~
nnoremap <2-LeftMouse> :exe "tag " . expand("<cword>")<CR>
nnoremap <RightMouse> <LeftMouse>""p
map <MiddleMouse> <Nop>
" ~ Miscellaneous ~
nnoremap <Del> :<C-u>execute "bdelete " . v:count<CR>
nmap <CR> ]<Space>j
nnoremap <silent> <Down> :resize +5<CR>
nnoremap <silent> <Left> :vert resize +5<CR>
nnoremap <silent> <Right> :vert resize -5<CR>
nnoremap <Space> :Buffers<CR>
nnoremap <Leader><Space> a<Space><Esc>hi<Space><Esc>l| " Put space before and after character under cursor
nnoremap <silent> <Up> :resize -5<CR>
nnoremap <silent> <F8> :TlistToggle<CR>


" #################### ABBREVIATIONS ##########################################
cnoreabbrev :f find
cnoreabbrev :s CtrlSF


" #################### AUTOCMDS ###############################################
function! s:CreateDir(file, buf)
	if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
		let dir=fnamemodify(a:file, ':h')
		if !isdirectory(dir)
			call mkdir(dir, 'p')
		endif
	endif
endfunction

autocmd BufNewFile,BufRead */ssh/config set filetype=sshconfig
autocmd BufRead,BufNewFile *.template.md setlocal nospell
autocmd BufRead,BufNewFile *.template.md set filetype=mermaid
autocmd BufRead,BufNewFile *.conf set filetype=cfg
autocmd BufRead,BufNewFile *.html set colorcolumn=
autocmd BufRead,BufNewFile *.html setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.log set filetype=messages
autocmd BufRead,BufNewFile *.lshrc set syntax=zsh
autocmd BufRead,BufNewFile *.lzshrc set syntax=zsh
autocmd BufRead,BufNewFile *.make set filetype=make
autocmd BufRead,BufNewFile *.md set colorcolumn=
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.nasm set filetype=nasm
autocmd BufRead,BufNewFile *.px setlocal filetype=python
autocmd BufRead,BufNewFile *.python set filetype=python
autocmd BufRead,BufNewFile *.rst setlocal spell
autocmd BufRead,BufNewFile *.sh set filetype=sh
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.tex,*.anki_vim let b:delimitMate_quotes = "\" ' $"
autocmd BufRead,BufNewFile *.txt set colorcolumn=
autocmd BufRead,BufNewFile *.txt set filetype=txt
autocmd BufRead,BufNewFile *.xmobarrc set syntax=haskell
autocmd BufRead,BufNewFile */syslog	set filetype=syslog
autocmd BufRead,BufNewFile *mutt-* set filetype=mail tw=80
autocmd BufRead,BufNewFile .coveragerc set filetype=cfg
autocmd BufRead,BufNewFile CMakeLists.txt set filetype=cmake
autocmd BufReadPost /etc/portage/sets/* set filetype=txt
autocmd BufReadPost /usr/include/c++/**/* set filetype=cpp
autocmd BufReadPost fcr-* set filetype=crontab
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd BufReadPost,BufNewFile *.applescript setlocal filetype=applescript
autocmd BufReadPost,BufNewFile *.auto set filetype=auto
autocmd BufWritePost ~/.local/share/chezmoi/*,/tmp/chezmoi-edit* :Silent chezmoi apply
autocmd! BufWritePost *.c,*.cpp,*.h,*.y silent! !ctags -Rf .tags . &
autocmd! BufWritePost .Xresources :Silent xrdb merge $HOME/.Xresources
autocmd! BufWritePost plugins.vim source %  " Automatic rewriting of .vimrc
autocmd! BufWritePost vimrc source %  " Automatic rewriting of .vimrc
autocmd ColorScheme * highlight RedundantSpaces ctermbg=red
autocmd FileType * setlocal formatoptions-=t
autocmd FileType c,cpp setlocal commentstring=//%s
autocmd FileType gitcommit,mail setlocal spell spelllang=en_us
autocmd FileType py,vim,zsh,tex setlocal formatoptions-=ro  " Disables auto-comments on newlines and disables autowrap
autocmd FileType scheme let b:delimitMate_quotes = "\""
autocmd FileType sh setlocal formatoptions+=r  " Enables auto-comments on newlines
autocmd InsertEnter * set timeoutlen=500
autocmd InsertLeave * set timeoutlen=1000

" Reloads buffer on buffer changes.
"
" Some hackery was needed here to fix errors that were popping up when editing
" in command-line mode (i.e. when pressing <C-f> while in command-line mode).
augroup auto_read
    autocmd!
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
                \ if mode() == 'n' && getcmdwintype() == '' | checktime | endif
augroup END


" Creates current file's parent directory if it doesn't already exist
" https://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * :call s:CreateDir(expand('<afile>'), +expand('<abuf>'))
augroup END

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
  autocmd FocusLost * redraw
  autocmd FocusGained * redraw
augroup END

" #################### PUBLIC FUNCTIONS #######################################
function! Bar(ch)
    let c = col('.')
    while c != 79
        exec "normal! A" . a:ch
        let c = col('.')
    endw
endfunction

function! Sum(number)
  let g:S = g:S + a:number
  return a:number
endfunction


" #################### CUSTOM COMMAND DEFINITIONS #############################
" Redraws screen after silent command
command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" Removes all swap files in the current working directory
command! RmSwap execute "Silent rm " . expand('%:h') . "/.*.swp"

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

command! -nargs=+ Term execute "term ++close " . <q-args>


" #################### MISCELLANEOUS ##########################################
" ----- Enable Plugins -----
filetype plugin indent on
runtime macros/matchit.vim

" ----- Split and Tab Settings -----
function! TmuxOrSplitSwitch(wincmd, tmuxdir)
  let previous_winnr = winnr()
  silent! execute "wincmd " . a:wincmd
  if previous_winnr == winnr()
    call system("tm-select-pane -" . a:tmuxdir . " -f")
    redraw!
  endif
endfunction

" ----- Syntax Highlighting -----
syntax on
syntax enable

hi Normal guibg=NONE ctermbg=NONE
hi SpellBad cterm=underline

" Folds
hi Folded ctermfg=21
hi FoldColumn ctermfg=21 cterm=bold

" #################### EXTRA MODULES ##########################################
function! s:SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

call s:SourceIfExists($HOME . "/.vim/plugins.vim")
