#!/bin/bash

# Usage: bazel test <TARGET> | trim_test_output
awk '
  {
    buf[NR]=$0
  }
  /Test log too large/ {
    test_log_too_large = 1
  }
  /There (was|were) [0-9]+ failures?:/ {
    if (current_start) {
      # Found new start before end - store previous incomplete range
      ranges[++range_count] = current_start ":" NR-1
    }
    current_start = NR
  }
  /FAILURES!!!/ { 
    if (current_start) {
      ranges[++range_count] = current_start ":" NR
      current_start = 0
    }
  }
  /\/test\.log$/ {
    if (test_log_too_large) {
      test_log_path = $0
    }
  }

  END {
    if (test_log_too_large && test_log_path) {
      # Recursively process the test.log file
      system("cat \"" test_log_path "\" | trim_test_output")
    } else if (range_count > 0) {
      # Print all found ranges
      for (r=1; r<=range_count; r++) {
        split(ranges[r], range, ":")
        for (i=range[1]; i<=range[2]; i++) print buf[i]
      }
    } else {
      # No matching patterns found -> print original input
      for (i=1; i<=NR; i++) print buf[i]
    }
  }
'
