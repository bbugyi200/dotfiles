#!/bin/bash

source ~/lib/bugyi.sh

export TZ=America/New_York
export USAGE_GRAMMAR=(
  "[-v] GAI_DIRECTORY AGENT_NAME"
  "-h"
)

read -r -d '' DOC <<EOM
$(usage)

Manages test execution for GAI workflows.

Positional Arguments
--------------------
GAI_DIRECTORY
    Relative gai workflow directory path (e.g., bb/gai/20251023165555).

AGENT_NAME
    Unique identifier for the agent running the test.

Optional Arguments
------------------
-h | --help
    View this help message.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).

Description
-----------
This script manages test execution for GAI workflows by:
  - Saving test output and diffs to files
  - Preventing duplicate test runs by comparing diffs
  - Trimming test output similar to the fix-test workflow

Examples
--------
gai_test bb/gai/20251023165555 agent_1
gai_test bb/gai/20251023165555 fix-test
EOM

# NOTE: This MUST come after the `read -r -d''` line above!
set -e

function run() {
  parse_cli_args "$@"

  # Validate that GAI_DIRECTORY exists
  if [[ ! -d "$GAI_DIRECTORY" ]]; then
    die "GAI directory '%s' does not exist" "$GAI_DIRECTORY"
  fi

  main_logic
}

function parse_cli_args() {
  log::debug "Command-Line Arguments: ($*)"

  eval set -- "$(getopt -o "h,v" -l "help,verbose" -- "$@")"

  VERBOSE=0
  while [[ -n "$1" ]]; do
    case $1 in
    -h | --help)
      echo "${DOC}"
      exit 0
      ;;
    -v | --verbose)
      VERBOSE=$((VERBOSE + 1))
      ;;
    --)
      shift
      break
      ;;
    esac
    shift
  done

  if [[ "${VERBOSE}" -gt 1 ]]; then
    PS4='$LINENO: '
    set -x
  fi

  if [[ $# -ne 2 ]]; then
    die "$(usage)" 2
  fi

  readonly GAI_DIRECTORY="$1"
  readonly AGENT_NAME="$2"
  readonly DOC
  readonly VERBOSE
}

function extract_test_command() {
  # Read the test command from the first test output file in the directory
  local test_command=""
  for file in "$GAI_DIRECTORY"/test_output*.txt; do
    if [[ -f "$file" ]]; then
      # Extract test command from the first line (remove first word prefix)
      test_command=$(head -n 1 "$file" | cut -d' ' -f2-)
      break
    fi
  done

  if [[ -z "$test_command" ]]; then
    die "Could not find test command in GAI directory"
  fi

  log::info "Test command: %s" "$test_command"
  echo "$test_command"
}

function check_duplicate_diff() {
  # Generate current diff
  local current_diff=$(hg diff)
  local current_diff_hash=$(echo "$current_diff" | sha256sum | cut -d' ' -f1)

  # Check if this diff has been tested before
  local diff_history_dir="$GAI_DIRECTORY/test_diffs"
  mkdir -p "$diff_history_dir"

  # Look for existing diff with same hash
  local existing_diff_file=""
  for diff_file in "$diff_history_dir"/*.diff; do
    if [[ -f "$diff_file" ]]; then
      local existing_hash=$(sha256sum "$diff_file" | cut -d' ' -f1)
      if [[ "$existing_hash" == "$current_diff_hash" ]]; then
        existing_diff_file="$diff_file"
        break
      fi
    fi
  done

  if [[ -n "$existing_diff_file" ]]; then
    handle_duplicate_diff "$existing_diff_file"
    # This function will exit, so we never return from here
  fi

  # Return values for use by other functions
  echo "$current_diff:$diff_history_dir"
}

function handle_duplicate_diff() {
  local existing_diff_file="$1"

  # This diff has been tested before
  log::info "This exact code change has already been tested."
  log::info "Previous diff file: %s" "$existing_diff_file"

  # Find and display the previous test output
  local diff_basename=$(basename "$existing_diff_file" .diff)
  local previous_output_file="$GAI_DIRECTORY/${diff_basename}_output.txt"
  local previous_exit_code_file="$GAI_DIRECTORY/${diff_basename}_exit_code.txt"

  # Determine the exit code from the previous test run
  local previous_exit_code=0
  if [[ -f "$previous_exit_code_file" ]]; then
    previous_exit_code=$(cat "$previous_exit_code_file")
  else
    # Fallback: try to determine from the output if test passed or failed
    if [[ -f "$previous_output_file" ]]; then
      # If output contains failure indicators, assume it failed
      if grep -q -E "(FAILED|ERROR|There was [0-9]+ failure|Test failed)" "$previous_output_file"; then
        previous_exit_code=1
      fi
    fi
  fi

  # Display the previous test output in the same format as new test output
  if [[ -f "$previous_output_file" ]]; then
    echo "" >&2
    echo "Previous test output (from $previous_output_file):" >&2
    echo "====================================================" >&2
    cat "$previous_output_file" >&2
    echo "" >&2
  else
    log::warn "Could not find previous test output file: %s" "$previous_output_file"
  fi

  if [[ $previous_exit_code -eq 0 ]]; then
    log::info "Previous test: PASSED"
  else
    log::info "Previous test: FAILED"
  fi

  exit "$previous_exit_code"
}

function run_test_and_save_output() {
  local test_command="$1"
  local current_diff="$2"
  local diff_history_dir="$3"

  # Create unique filenames for this test run
  local timestamp=$(date +%Y%m%d%H%M%S)
  local diff_file="$diff_history_dir/${AGENT_NAME}_${timestamp}.diff"
  local output_file="$GAI_DIRECTORY/${AGENT_NAME}_${timestamp}_output.txt"
  local exit_code_file="$GAI_DIRECTORY/${AGENT_NAME}_${timestamp}_exit_code.txt"

  # Save the current diff
  echo "$current_diff" >"$diff_file"

  log::info "Running test..."

  # Run the test command and capture output
  local test_output
  local return_code
  if test_output=$(eval "$test_command" 2>&1); then
    return_code=0
  else
    return_code=$?
  fi

  # Apply the same trimming logic as the fix-test workflow
  local trimmed_output="$test_output"

  # Check if "There was 1 failure" exists in the output
  if echo "$test_output" | grep -q "There was 1 failure"; then
    # Use the same trimming logic: tac | grep -m1 'There was 1 failure' -B1000 | tac
    trimmed_output=$(echo "$test_output" | tac | grep -m1 "There was 1 failure" -B1000 | tac)
  fi

  # Save the trimmed output to file
  echo "$trimmed_output" >"$output_file"

  # Save the exit code to file
  echo "$return_code" >"$exit_code_file"

  # Display the output
  echo ""
  echo "Test output (saved to $output_file):"
  echo "===================================="
  echo "$trimmed_output"

  # Exit with the same code as the test command
  exit $return_code
}

function main_logic() {
  local test_command
  test_command=$(extract_test_command)

  local diff_info
  diff_info=$(check_duplicate_diff)
  local current_diff=$(echo "$diff_info" | cut -d: -f1)
  local diff_history_dir=$(echo "$diff_info" | cut -d: -f2-)

  run_test_and_save_output "$test_command" "$current_diff" "$diff_history_dir"
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
  run "$@"
fi
