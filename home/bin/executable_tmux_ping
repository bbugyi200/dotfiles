#!/bin/bash

source ~/lib/bugyi.sh

# Check internet connectivity with a quick ping
# Returns a running count of last 10 pings for tmux status bar
# Only runs on macOS

export USAGE_GRAMMAR=(
  "[-v]"
  "-h"
)

read -r -d '' DOC <<EOM
$(usage)

A utility that tracks internet connectivity by pinging 8.8.8.8 and displaying
a running count of successful pings out of the last 10 attempts.

Designed to be called repeatedly by tmux status bar every 2 seconds.

Optional Arguments
------------------
-h | --help
    View this help message.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).

Examples
--------
# Run once to check connectivity
tmux_ping
EOM

function run() {
  parse_cli_args "$@"
  check_connectivity
}

function check_connectivity() {
  # Exit early if not on macOS
  if [[ "$(uname -s)" != "Darwin" ]]; then
    exit 0
  fi

  # File to store ping results
  local ping_file="$HOME/tmp/tmux_ping_results"
  [[ -d "$(dirname "$ping_file")" ]] || mkdir -p "$(dirname "$ping_file")"

  # Perform ping test
  local result
  if ping -c 1 -W 2 8.8.8.8 >/dev/null 2>&1; then
    result="1"
    log::debug "Ping successful"
  else
    result="0"
    log::debug "Ping failed"
  fi

  # Read existing results or initialize empty
  local results
  if [[ -f "$ping_file" ]]; then
    results=$(cat "$ping_file" 2>/dev/null || echo "")
  else
    results=""
  fi

  log::debug "Previous results: '$results'"

  # Add new result
  results="$results$result"

  # Keep only last 10 results
  if [[ ${#results} -gt 10 ]]; then
    results=${results: -10}
  fi

  log::debug "Updated results: '$results'"

  # Write back to file
  echo -n "$results" >"$ping_file"

  # Count successes
  local success_count=0
  for ((i = 0; i < ${#results}; i++)); do
    if [[ "${results:$i:1}" == "1" ]]; then
      ((success_count++))
    fi
  done
  local total_count=${#results}

  log::debug "Success count: $success_count/$total_count"

  # Display result
  # Display result with status symbol
  local symbol
  if [[ "${results: -1}" == "1" ]]; then
    symbol="✓"
  else
    symbol="✗"
  fi
  echo "$symbol $success_count/$total_count | "
}

function parse_cli_args() {
  log::debug "Command-Line Arguments: ($*)"

  eval set -- "$(getopt -o "h,v" -l "help,verbose" -- "$@")"

  VERBOSE=0
  while [[ -n "$1" ]]; do
    case $1 in
    -h | --help)
      echo "${DOC}"
      exit 0
      ;;
    -v | --verbose)
      VERBOSE=$((VERBOSE + 1))
      ;;
    --)
      shift
      break
      ;;
    esac
    shift
  done

  if [[ "${VERBOSE}" -gt 1 ]]; then
    PS4='$LINENO: '
    set -x
  fi

  readonly DOC
  readonly VERBOSE
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
  run "$@"
fi
