#!/bin/bash

source ~/lib/bugyi.sh

USAGE_GRAMMAR=(
  "[-v] TAG"
  "[-v] -c COMPONENT TAG"
  "[-v] -C ROOT_COMPONENT TAG"
  "[-v] -p PARENT TAG"
  "[-v] -P TAG"
  "-h"
)

read -r -d '' DOC <<EOM
$(usage)

Create a new Buganizer bug from the command-line using go/bugged.

Positional Arguments
--------------------
TAG
    The new bug we create will have its title prefixed with [TAG].

Optional Arguments
------------------
-c COMPONENT | --component COMPONENT
    The ID of a Buganizer component that should be used for our new bug.

-C ROOT_COMPONENT | --root-component ROOT_COMPONENT
    Should be a positive integer which represents a Buganizer component ID. The
    fzf command (used by bug_cpick to interactively select a bug component) will
    be fed a list of all components which are children of ROOT_COMPONENT.

-h | --help
    View this help message.

-p PARENT | --parent PARENT
    PARENT should be a positive integer which will be treated as a Buganizer bug
    ID. PARENT will be used as the parent of the new bug.

-P | --pick-parent
    Use fzf to select a parent for our new bug.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (eg -vv).

Examples
--------
bug_new foobar
bug_new foobar -c 1234567
bug_new foobar -p 123456789
EOM

function run() {
  parse_cli_args "$@"

  if $SHOULD_PICK_PARENT; then
    log::info "Prompting for parent bug using fzf."
    parent="$(bug_pick 'a:me is:open')"
  elif [[ -n "${PARENT}" ]]; then
    parent="${PARENT}"
  fi

  if [[ -n "${parent}" ]]; then
    extra_create_opts="-p ${parent}"
    component="$(bugged search "id:${parent}" | tail -n +2 | sed 's/ \+/ /' | cut -f2 -d' ')"
    log::info "Using same component as parent bug: %d" "${component}"
  elif [[ -n "${COMPONENT}" ]]; then
    component="${COMPONENT}"
  else
    component="$(bug_cpick ${ROOT_COMPONENT})"
    if [[ -z "${component}" ]]; then
      die "No bug component selected!"
    fi
  fi

  bug_create "${TAG}" "${component}" ${extra_create_opts}
}

function parse_cli_args() {
  dmsg "Command-Line Arguments: ($*)"

  eval set -- "$(getopt -o "c:,C:,h,p:,P,v" -l "component:,root-component:,help,parent:,pick-parent,verbose" -- "$@")"

  # shellcheck disable=SC2154
  read -r -d '' HELP <<EOM || [[ -n "${HELP}" ]]
EOM
  ${DOC}

  VERBOSE=0
  SHOULD_PICK_PARENT=false
  while [[ -n "$1" ]]; do
    case $1 in
    -c | --component)
      shift
      readonly COMPONENT="$1"
      ;;
    -C | --root-component)
      shift
      readonly ROOT_COMPONENT="$1"
      ;;
    -h | --help)
      echo "${HELP}"
      exit 0
      ;;
    -p | --parent)
      shift
      readonly PARENT="$1"
      ;;
    -P | --pick-parent)
      SHOULD_PICK_PARENT=true
      ;;
    -v | --verbose)
      VERBOSE=$((VERBOSE + 1))
      ;;
    --)
      shift
      break
      ;;
    esac
    shift
  done

  if [[ "${VERBOSE}" -gt 1 ]]; then
    PS4='$LINENO: '
    set -x
  fi

  if [[ $# -ne 1 ]]; then
    die "$(usage)" 2
  fi

  readonly TAG="$1"
  shift

  readonly DOC
  readonly HELP
  readonly SHOULD_PICK_PARENT
  readonly VERBOSE
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
  run "$@"
fi
