#!/bin/bash

source ~/lib/bugyi.sh

export USAGE_GRAMMAR=(
  "[-v] COMMAND"
  "-h"
)

read -r -d '' DOC <<EOM
$(usage)

View --help output in Neovim!

Positional Arguments
--------------------
COMMAND
    The command to view --help for. This should be a valid command that is in your PATH.

Optional Arguments
------------------
-h | --help
    View help message for ${SCRIPTNAME}.

-v | --verbose
    Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).

Examples
--------
# The following command is loosely equivalent to 'gh --help > <somefile> && nvim <somefile>'.
vhelp gh
EOM

function run() {
  parse_cli_args "$@"

  local tmp_dir=/tmp/vhelp
  mkdir -p ${tmp_dir}
  local tmp_file=${tmp_dir}/${COMMAND}.txt

  ${COMMAND} --help >"${tmp_file}"
  nvim -c "set ft=man" "${tmp_file}"
}

function parse_cli_args() {
  log::debug "Command-Line Arguments: ($*)"

  eval set -- "$(getopt -o "h,v" -l "help,verbose" -- "$@")"

  VERBOSE=0
  while [[ -n "$1" ]]; do
    case $1 in
    -h | --help)
      echo "${DOC}"
      exit 0
      ;;
    -v | --verbose)
      VERBOSE=$((VERBOSE + 1))
      ;;
    --)
      shift
      break
      ;;
    esac
    shift
  done

  if [[ "${VERBOSE}" -gt 1 ]]; then
    PS4='$LINENO: '
    set -x
  fi

  if [[ $# -ne 1 ]]; then
    die "$(usage)" 2
  fi

  readonly COMMAND="$1"
  shift

  readonly DOC
  readonly VERBOSE
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
  run "$@"
fi
