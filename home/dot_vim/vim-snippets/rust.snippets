#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50


snippet || "Closure, anonymous function (inline)" i
${1:move }|$2| { $3 }
endsnippet

snippet |} "Closure, anonymous function (block)" i
${1:move }|$2| {
	$3
}
endsnippet

snippet ae
assert_eq!($1);
endsnippet

snippet arg
.arg(
	Arg::with_name("$1")
		.short("$2")
		.long("$1")
		.help("$0")
)
endsnippet

snippet ass
assert!($1);
endsnippet

snippet assert
assert!($1);
endsnippet

snippet debug
debug!("$1");
endsnippet

snippet else
else {
    ${1:${VISUAL}}
}
endsnippet

snippet fd "Struct field definition" w
${1:name}: ${2:Type},
endsnippet

snippet format "format!(...);"
format!("$1");
endsnippet

snippet fmt "format!(...)" i
format!("$1")
endsnippet

snippet for
for $1 in $2 {
    $3
}
endsnippet

snippet if
if $1 {
    ${2:${VISUAL}}
}
endsnippet

snippet info
info!("$1");
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} {
	(${2:matcher}) => (
		$3
	)
}
endsnippet

snippet print
println!("$1", $2);
endsnippet

snippet test
#[test]
fn test_$1() {
    $2
}
endsnippet

snippet todo
// TODO(bugyi): 
endsnippet

snippet trace
trace!("$1 = ${2:{:?}}", $1);
endsnippet

snippet warn
warn!("$1", $2);
endsnippet

# vim:ft=snippets:
