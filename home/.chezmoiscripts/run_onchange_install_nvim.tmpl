#!/bin/bash

# Log message to stdout.
#
# Arguments:
# ----------
# msg: The message to print.
# fmt_args: (optional) Arguments to format the message using printf.
function log() {
  local msg
  if [[ "$#" -eq 1 ]]; then
    msg="$1"
    shift
  else
    msg="$(printf "$@")"
  fi

  printf ">>> %s\n" "$msg"
}

# Install / update Neovim and related utilities daily.
#
# DATE: {{ output "date" "+%Y-%m-%d" | trim }}
function install_or_update_neovim() {
  # Build and install neovim from source.
  local build_dir=$HOME/tmp/build/neovim
  if command -v nvim &>/dev/null; then
    curr_nvim_version="$(nvim --version | head -n 1 | cut -d' ' -f2)"
  fi
  if [[ -d "$build_dir" ]]; then
    log "BUILD REPO EXISTS: %s. CHECKING OUT master BRANCH." "$build_dir"
    pushd "$build_dir" &>/dev/null
    git switch master

    log "UPDATING NEOVIM REPO"
    if ! git pull; then
      log "UNABLE TO PULL NEOVIM REPO. DELETING AND RE-CLONING"
      popd &>/dev/null
      sudo rm -rf "$build_dir"
    fi
  else
    log "BUILD REPO DOES NOT EXIST: %s" "$build_dir"
  fi

  if ! [[ -d "$build_dir" ]]; then
    log "CLONING NEOVIM REPO"
    mkdir -p "$build_dir" &&
      git clone https://github.com/neovim/neovim "$build_dir" &&
      cd "$build_dir"
  fi

  # Install Neovim from source if the latest version is not installed.
  local latest_nvim_version=$(git tag | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -V | tail -n1)
  if [[ "$latest_nvim_version" == "$curr_nvim_version" ]]; then
    log "LATEST NEOVIM VERSION ALREADY INSTALLED: %s" "$curr_nvim_version"
  else
    log "NEOVIM VERSION UPDATE:  %s -> %s" \
      "$curr_nvim_version" \
      "$latest_nvim_version"
    git checkout "$latest_nvim_version" &&
      make CMAKE_BUILD_TYPE=Release -j &&
      sudo make install
  fi
}

install_or_update_neovim

# vim: ft=bash
