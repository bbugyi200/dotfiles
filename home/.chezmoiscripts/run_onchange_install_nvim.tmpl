#!/bin/bash

# Install / update Neovim and related utilities daily.
#
# DATE: {{ output "date" "+%Y-%m-%d" | trim }}
function install_or_update_neovim() {
  # Build and install neovim from source.
  local build_dir=$HOME/tmp/build/neovim
  if command -v nvim &>/dev/null; then
    nvim_version="$(nvim --version | head -n 1 | cut -d' ' -f2)"
  fi
  if [[ -d "$build_dir" ]]; then
    printf ">>> BUILD REPO EXISTS: %s. CHECKING OUT master BRANCH.\n" "$build_dir"
    pushd "$build_dir" &>/dev/null
    git switch master

    printf ">>> UPDATING NEOVIM REPO\n"
    if ! git pull; then
      printf ">>> UNABLE TO PULL NEOVIM REPO. DELETING AND RE-CLONING\n"
      popd &>/dev/null
      sudo rm -rf "$build_dir"
    fi
  else
    printf ">>> BUILD REPO DOES NOT EXIST: %s\n" "$build_dir"
  fi

  if ! [[ -d "$build_dir" ]]; then
    printf ">>> CLONING NEOVIM REPO\n"
    mkdir -p "$build_dir" &&
      git clone https://github.com/neovim/neovim "$build_dir" &&
      cd "$build_dir"
  fi

  # Install Neovim from source if the latest version is not installed.
  local latest_nvim_version="v0.$(git tag | cut -c4- | grep '[0-9]' | sort -n | tail -n 1)"
  if [[ "$latest_nvim_version" == "$nvim_version" ]]; then
    printf ">>> NEOVIM VERSION ALREADY LATEST: %s\n" "$nvim_version"
  else
    printf ">>> NEOVIM VERSION UPDATE:  %s -> %s\n" \
      "$nvim_version" \
      "$latest_nvim_version"
    git checkout "$latest_nvim_version" &&
      make CMAKE_BUILD_TYPE=Release -j &&
      sudo make install
  fi
}

install_or_update_neovim

# vim: ft=bash
