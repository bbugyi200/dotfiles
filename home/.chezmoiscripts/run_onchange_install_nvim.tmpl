#!/bin/bash

# CHEZMOI WILL RUN THIS SCRIPT DAILY: {{ output "date" "+%Y-%m-%d" | trim }}

source ~/.local/share/chezmoi/chezmoi_utils.sh

# Install / update Neovim and related utilities daily.
function install_or_update_neovim() {
  # Build and install neovim from source.
  local build_dir="$(chez::build_dir_root)"/neovim
  if command -v nvim &>/dev/null; then
    local curr_nvim_version="$(nvim --version | head -n 1 | cut -d' ' -f2)"
  else
    local curr_nvim_version="NONE"
  fi

  if [[ -d "$build_dir" ]]; then
    chez::log "BUILD REPO EXISTS: %s. CHECKING OUT master BRANCH." "$build_dir"
    pushd "$build_dir" &>/dev/null || exit
    git switch master

    chez::log "UPDATING NEOVIM REPO"
    if ! git pull; then
      chez::log "UNABLE TO UPDATE NEOVIM REPO. DELETING AND RE-CLONING"
      popd &>/dev/null || exit
      sudo rm -rf "$build_dir"
    fi
  else
    chez::log "BUILD REPO DOES NOT EXIST: %s" "$build_dir"
  fi

  if ! [[ -d "$build_dir" ]]; then
    chez::log "CLONING NEOVIM REPO"
    mkdir -p "$build_dir" &&
      git clone https://github.com/neovim/neovim "$build_dir" &&
      cd "$build_dir" || exit
  fi

  # Install Neovim from source if the latest version is not installed.
  local latest_nvim_version=$(git tag | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -V | tail -n1)
  if [[ "$latest_nvim_version" == "$curr_nvim_version" ]]; then
    chez::log "LATEST NEOVIM VERSION ALREADY INSTALLED: %s" "$curr_nvim_version"
  else
    local cmake_bin="$(command -v cmake)"
    if [[ -z "$cmake_bin" ]]; then
      chez::log "ERROR: cmake not found. Exiting."
      return 1
    fi
    chez::log "NEOVIM VERSION UPDATE:  %s -> %s" \
      "$curr_nvim_version" \
      "$latest_nvim_version"
    git checkout "$latest_nvim_version" &&
      make CMAKE_BUILD_TYPE=Release -j &&
      sudo make CMAKE="$cmake_bin" install
  fi
}

install_or_update_neovim
